---
- name: Run Prowler Docker Container using either Service Account or ARN for Role Assumption in AWX
  hosts: localhost
  become: True

  vars_prompt:
    - name: choice
      prompt: "Choose an option (1 for Service Account, 2 for ARN)"
      private: no

    - name: role_arn
      prompt: "Enter the Role ARN (only required for option 2)"
      private: no
      default: ""
    
    - name: region
      prompt: "Enter the AWS region"
      private: no

    - name: services
      prompt: "Enter the list of services (e.g., 's3,vpc,elb')"
      private: no

    - name: web_identity_token
      prompt: "Enter the path to the web identity token (only required for option 1)"
      private: no
      default: ""

  tasks:
    - name: Validate user choice
      fail:
        msg: "Invalid choice. Please choose 1 for Service Account or 2 for ARN."
      when: choice not in ['1', '2']

    - name: Check if role ARN is required but not provided
      fail:
        msg: "Role ARN is required for option 2"
      when: choice == '2' and role_arn == ""

    - name: Check if web identity token is required but not provided
      fail:
        msg: "Web identity token is required for option 1"
      when: choice == '1' and web_identity_token == ""

    # Option 1: Assume Role using Service Account
    - name: Assume Role with AWS STS using Service Account
      shell: |
        aws sts assume-role-with-web-identity --role-arn arn:aws:iam::663552238330:role/prowler --role-session-name prowlerSession --region {{ region }} --output json --web-identity-token {{ web_identity_token }}
      register: sts_output_service
      ignore_errors: yes
      when: choice == '1'

    - name: Parse STS output for Service Account
      set_fact:
        aws_access_key_id_service: "{{ sts_output_service.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
        aws_secret_access_key_service: "{{ sts_output_service.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
        aws_session_token_service: "{{ sts_output_service.stdout | from_json | json_query('Credentials.SessionToken') }}"
      when: choice == '1'

    - name: Execute Prowler commands using assumed role credentials for Service Account
      shell: |
        AWS_ACCESS_KEY_ID={{ aws_access_key_id_service }} \
        AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key_service }} \
        AWS_SESSION_TOKEN={{ aws_session_token_service }} \
        prowler aws --services {{ services }} -M csv
      register: prowler_output_service
      ignore_errors: yes
      when: choice == '1'

    # Option 2: Assume Role using ARN
    - name: Assume Role with AWS STS using ARN
      shell: |
        aws sts assume-role --role-arn {{ role_arn }} --role-session-name prowlerSession --region {{ region }} --output json
      register: sts_output_arn
      ignore_errors: yes
      when: choice == '2'

    - name: Parse STS output for ARN
      set_fact:
        aws_access_key_id_arn: "{{ sts_output_arn.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
        aws_secret_access_key_arn: "{{ sts_output_arn.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
        aws_session_token_arn: "{{ sts_output_arn.stdout | from_json | json_query('Credentials.SessionToken') }}"
      when: choice == '2'

    - name: Execute Prowler commands using assumed role credentials for ARN
      shell: |
        AWS_ACCESS_KEY_ID={{ aws_access_key_id_arn }} \
        AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key_arn }} \
        AWS_SESSION_TOKEN={{ aws_session_token_arn }} \
        prowler aws --services {{ services }} -M csv
      register: prowler_output_arn
      ignore_errors: yes
      when: choice == '2'

    # Common Task: Find the generated CSV file
    - name: Find the generated CSV file
      shell: cat /runner/project/output/*.csv
      register: csv_output
      ignore_errors: yes

    - name: Upload CSV file to Backend API
      uri:
        url: "https://backend.example.com/upload"
        method: POST
        headers:
          Content-Type: "multipart/form-data"
        body_format: form-multipart
        body:
          file: "{{ lookup('file', '/runner/project/output/prowler-report.csv') }}"
        status_code: 200
      register: api_upload_response
      ignore_errors: yes

    - name: Show API upload response
      debug:
        var: api_upload_response
