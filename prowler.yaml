---
- name: Run Prowler based on user choice (AWS Access Key/Secret Key or ARN)
  hosts: localhost
  become: true

  vars:
    services: "elb,s3,ec2"  # You can change this to any AWS services you need
    role_arn: "arn:aws:iam::663552238330:role/prowler"  # Replace with your role ARN
    role_session_name: "prowlerSession"
    choice: "{{ choice }}"  # This value will be passed from AWX survey or command line

  tasks:
    - name: Debug user choice
      debug:
        msg: "User choice is: '{{ choice }}'"

    - name: Validate user choice
      fail:
        msg: "Invalid choice. Please choose '1' for AWS credentials or '2' for ARN role assumption."
      when: choice not in ['1', '2']

    - name: Check if the user chose '1' to use AWS credentials from environment
      debug:
        msg: "Job will run using AWS credentials from environment variables."
      when: choice == '1'

    - name: Execute Prowler commands for specified services using AWS credentials (choice 1)
      shell: |
        AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY_ID') }} \
        AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }} \
        prowler aws --services {{ services }} -M csv --verbose
      register: prowler_output
      when: choice == '1'

    - name: Check if the user chose '2' to assume role via ARN
      debug:
        msg: "Job will run by assuming the AWS role."
      when: choice == '2'

    - name: Assume the AWS Role (choice 2)
      shell: |
        aws sts assume-role --role-arn {{ role_arn }} --role-session-name {{ role_session_name }} --output json
      register: assume_role_output
      when: choice == '2'

    - name: Parse and extract AWS credentials (choice 2)
      set_fact:
        aws_access_key_id: "{{ assume_role_output.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
        aws_secret_access_key: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
        aws_session_token: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SessionToken') }}"
      when: choice == '2'

    - name: Export AWS environment variables (choice 2)
      shell: |
        export AWS_ACCESS_KEY_ID={{ aws_access_key_id }}
        export AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }}
        export AWS_SESSION_TOKEN={{ aws_session_token }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_SESSION_TOKEN: "{{ aws_session_token }}"
      when: choice == '2'

    - name: Run Prowler for specified AWS services with verbose output (choice 2)
      shell: |
        prowler aws --services {{ services }} -M csv --verbose
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_SESSION_TOKEN: "{{ aws_session_token }}"
      register: prowler_output
      when: choice == '2'

    - name: Find the CSV file
      find:
        paths: "/runner/project/output/"
        patterns: "prowler-output-*.csv"
      register: csv_file

    - name: Read the CSV file
      command: cat "{{ csv_file.files[0].path }}"
      register: csv_output

    - name: Display the CSV output of Prowler commands
      debug:
        msg: "{{ csv_output.stdout }}"

    - name: Display Prowler output for debugging
      debug:
        msg: "{{ prowler_output.stdout }}"

    - name: Display Prowler version
      shell: prowler --version
      register: prowler_version_output

    - name: Display Prowler version output
      debug:
        var: prowler_version_output.stdout
