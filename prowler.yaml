---
- name: Run Prowler Docker Container using AWX Credentials
  hosts: localhost
  become: True

  vars:
    services: "elb,s3,ec2"  # Define the services you want to scan, separated by commas
    role_session_name: "prowlerSession"  # Session name when assuming a role (Choice 2)

  tasks:
    - name: Debug user choice
      debug:
        msg: "User choice is: '{{ choice }}'"

    - name: Validate user choice
      fail:
        msg: "Invalid choice. Please select '1' to run with AWS credentials or '2' to assume role using ARN."
      when: choice not in [1, 2]

    # Choice 1: Use AWS credentials from environment variables
    - name: Execute Prowler commands for specified services using credentials from AWX (Choice 1)
      shell: |
        AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY_ID') }} \
        AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }} \
        prowler aws --services {{ services }} -M csv
      register: prowler_output
      when: choice == 1
      ignore_errors: yes

    - name: Find the CSV file (Choice 1)
      find:
        paths: "/runner/project/output/"
        patterns: "prowler-output-*.csv"
      register: csv_file
      when: choice == 1

    - name: Read the CSV file (Choice 1)
      command: cat "{{ csv_file.files[0].path }}"
      register: csv_output
      when: choice == 1

    - name: Display the CSV output of Prowler commands (Choice 1)
      debug:
        msg: "{{ csv_output.stdout }}"
      when: choice == 1

    - name: Display using the echo command (Choice 1)
      shell: echo "{{ prowler_output.stdout }}"
      when: choice == 1

    - name: Display Prowler version (Choice 1)
      shell: prowler --version
      register: prowler_version_output
      when: choice == 1

    - name: Display Prowler version output (Choice 1)
      debug:
        var: prowler_version_output.stdout
      when: choice == 1

    # Choice 2: Assume an AWS role using ARN
    - name: Assume the AWS Role (Choice 2)
      shell: |
        aws sts assume-role --role-arn {{ role_arn }} --role-session-name {{ role_session_name }} --output json
      register: assume_role_output
      when: choice == 2

    - name: Parse and extract AWS credentials from assumed role (Choice 2)
      set_fact:
        aws_access_key_id: "{{ assume_role_output.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
        aws_secret_access_key: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
        aws_session_token: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SessionToken') }}"
      when: choice == 2

    - name: Run Prowler for specified AWS services with assumed role credentials (Choice 2)
      shell: |
        AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
        AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
        AWS_SESSION_TOKEN={{ aws_session_token }} \
        prowler aws --services {{ services }} -M csv
      register: prowler_output
      when: choice == 2

    - name: Find the CSV file (Choice 2)
      find:
        paths: "/runner/project/output/"
        patterns: "prowler-output-*.csv"
      register: csv_file
      when: choice == 2

    - name: Read the CSV file (Choice 2)
      command: cat "{{ csv_file.files[0].path }}"
      register: csv_output
      when: choice == 2

    - name: Display the CSV output of Prowler commands (Choice 2)
      debug:
        msg: "{{ csv_output.stdout }}"
      when: choice == 2

    - name: Display using the echo command (Choice 2)
      shell: echo "{{ prowler_output.stdout }}"
      when: choice == 2

    - name: Display Prowler version (Choice 2)
      shell: prowler --version
      register: prowler_version_output
      when: choice == 2

    - name: Display Prowler version output (Choice 2)
      debug:
        var: prowler_version_output.stdout
      when: choice == 2
