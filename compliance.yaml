---
- name: Run Healthcheck Docker Container using AWX Credentials
  hosts: localhost
  become: true

  vars:
    services: "elb,s3,ec2"  # Define the services to scan, separated by commas
    region: "us-west-2"  # Region for scans
    compliance_value: "cis-1.2"  # Compliance value (adjust as needed)
    role_session_name: "HealthcheckSession"  # Session name when assuming a role
    scan_type: "services"  # Options: 'services' or 'compliance'
    api_url: "https://dev.concierto.cloud/api/masterService/uploadFileForClient"  # API URL for file upload

  tasks:
    - name: Debug user choice
      debug:
        msg: "User choice is: '{{ choice }}'"

    - name: Validate user choice
      fail:
        msg: "Invalid choice. Please select '1' to run with AWS credentials or '2' to assume role using ARN."
      when: choice not in [1, 2]

    - name: Debug scan type
      debug:
        msg: "Scan type is: '{{ scan_type }}'"

    # Choice 1: Use AWS credentials from environment variables
    - name: Display message for AWS credentials (Choice 1)
      debug:
        msg: "Using AWS Access Key: {{ lookup('env', 'AWS_ACCESS_KEY_ID') }} and Secret Key for authentication."
      when: choice == 1

    # Choice 1: Compliance check
    - name: Execute Healthcheck compliance check using AWS credentials (Choice 1 - Compliance)
      shell: |
        AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY_ID') }} \
        AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }} \
        prowler aws --region {{ region }} -c {{ compliance_value }}
      register: healthcheck_output
      when: choice == 1 and scan_type == "compliance"
      ignore_errors: yes

    # Choice 1: Service-specific check
    - name: Execute Healthcheck service check using AWS credentials (Choice 1 - Services)
      shell: |
        AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY_ID') }} \
        AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }} \
        prowler aws --region {{ region }} --services {{ services }}
      register: healthcheck_output
      when: choice == 1 and scan_type == "services"
      ignore_errors: yes

    # Choice 2: Assume an AWS role using ARN
    - name: Display message for ARN-based authentication (Choice 2)
      debug:
        msg: "Proceeding with role assumption using ARN: {{ role_arn }} and session name: '{{ role_session_name }}'."
      when: choice == 2

    - name: Assume the AWS Role (Choice 2)
      shell: |
        aws sts assume-role --role-arn {{ role_arn }} --role-session-name {{ role_session_name }} --output json
      register: assume_role_output
      when: choice == 2

    - name: Parse and extract AWS credentials from assumed role (Choice 2)
      set_fact:
        aws_access_key_id: "{{ assume_role_output.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
        aws_secret_access_key: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
        aws_session_token: "{{ assume_role_output.stdout | from_json | json_query('Credentials.SessionToken') }}"
      when: choice == 2

    # Choice 2: Compliance check
    - name: Execute Healthcheck compliance check with assumed role credentials (Choice 2 - Compliance)
      shell: |
        AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
        AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
        AWS_SESSION_TOKEN={{ aws_session_token }} \
        prowler aws --region {{ region }} -c {{ compliance_value }}
      register: healthcheck_output
      when: choice == 2 and scan_type == "compliance"
      ignore_errors: yes

    # Choice 2: Service-specific check
    - name: Execute Healthcheck service check with assumed role credentials (Choice 2 - Services)
      shell: |
        AWS_ACCESS_KEY_ID={{ aws_access_key_id }} \
        AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }} \
        AWS_SESSION_TOKEN={{ aws_session_token }} \
        prowler aws --region {{ region }} --services {{ services }}
      register: healthcheck_output
      when: choice == 2 and scan_type == "services"
      ignore_errors: yes

    # Install jq for JSON processing
    - name: Install jq
      apt:
        name: jq
        state: present
      when: ansible_os_family == "Debian"  # Change as needed for your OS family

    - name: Install jq (RedHat)
      yum:
        name: jq
        state: present
      when: ansible_os_family == "RedHat"  # Change as needed for your OS family

    # Install pandoc for document conversion
    - name: Install pandoc (Debian)
      apt:
        name: pandoc
        state: present
      when: ansible_os_family == "Debian"  # Change as needed for your OS family

    - name: Install pandoc (RedHat)
      yum:
        name: pandoc
        state: present
      when: ansible_os_family == "RedHat"  # Change as needed for your OS family

    # Find JSON files generated by the scan
    - name: Find all JSON files in /runner/project/output/
      find:
        paths: "/runner/project/output/"
        patterns: "prowler-output-*.json"
      register: json_files

    # Rename JSON files to Healthcheck format and convert to PDF
    - name: Process JSON files
      shell: |
        # Get the new PDF file name
        new_pdf="{{ item.path | regex_replace('prowler', 'healthcheck') | regex_replace('\\.json$', '.pdf') }}"
        # Rename the JSON file
        mv "{{ item.path }}" "{{ item.path | regex_replace('prowler', 'healthcheck') }}"
        # Convert JSON to temporary text file and then to PDF
        cat "{{ item.path | regex_replace('prowler', 'healthcheck') }}" | jq . > temp.txt && \
        pandoc temp.txt -o "/runner/project/output/${new_pdf}"
        rm temp.txt
      loop: "{{ json_files.files }}"
      register: processed_files
      when: json_files.matched > 0
      no_log: true

    # Upload each PDF file to Backend API
    - name: Upload PDF file to Backend API
      uri:
        url: "{{ api_url }}"
        method: POST
        headers:
          userId: "UD_5bd9c0cc2c71a000152c2d32"
          apiToken: "698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42"
          clientId: "CD_5b974fbfb2864d162de79b66"
          realm: "trianz"
        body_format: form-multipart
        body:
          files:
            content: "{{ lookup('file', '/runner/project/output/' + (item.path | regex_replace('prowler', 'healthcheck') | regex_replace('\\.json$', '.pdf'))) }}"
            filename: "{{ item.path | regex_replace('prowler', 'healthcheck') | regex_replace('\\.json$', '.pdf') }}"
      loop: "{{ json_files.files }}"
      register: upload_response
      when: json_files.matched > 0

    # Optional: Debug API response
    - name: Debug API response
      debug:
        var: upload_response
      when: json_files.matched > 0
