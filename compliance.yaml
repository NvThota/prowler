---
- name: Run Prowler Docker Container using AWX Credentials
  hosts: localhost
  become: True

  vars:
    # Define variables as needed
    api_url: "https://dev.concierto.cloud/api/masterService/uploadFileForClient"
    # other relevant variables

  tasks:
    # Run previous tasks as needed...

    # Debug to confirm Prowler JSON output
    - name: Verify files in output directory
      shell: "ls -l /runner/project/output/"
      register: output_files
      ignore_errors: yes

    - name: Debug output files
      debug:
        var: output_files.stdout_lines

    # Find the JSON file
    - name: Find the JSON file
      find:
        paths: "/runner/project/output/"
        patterns: "prowler-output-*.json"
      register: json_file

    - name: Debug JSON file match count
      debug:
        msg: "Matched files: {{ json_file.matched }}"

    # Compress the JSON file into ZIP format (only if a match was found)
    - name: Compress JSON file into ZIP format
      archive:
        path: "{{ json_file.files[0].path }}"
        dest: "/runner/project/output/{{ json_file.files[0].path | basename | regex_replace('\\.json$', '.zip') }}"
        format: zip
      when: json_file.matched > 0

    # Wait for 2 minutes before uploading
    - name: Wait for 2 minutes before uploading the file
      pause:
        minutes: 0

    # Upload the ZIP file to Backend API
    - name: Upload ZIP to Backend API
      uri:
        url: "{{ api_url }}"
        method: POST
        headers:
          userId: "UD_5bd9c0cc2c71a000152c2d32"
          apiToken: "698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42"
          clientId: "CD_5b974fbfb2864d162de79b66"
          realm: "trianz"
        body_format: form-multipart
        body:
          files:
            content: "{{ lookup('file', '/runner/project/output/' + json_file.files[0].path | basename | regex_replace('\\.json$', '.zip')) }}"
            filename: "{{ json_file.files[0].path | basename | regex_replace('\\.json$', '.zip') }}"
          userId: "UD_5bd9c0cc2c71a000152c2d32"
          apiToken: "698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42"
      register: upload_response
      when: json_file.matched > 0

    # Optional: Debug API response
    - name: Debug API response
      debug:
        var: upload_response
      when: json_file.matched > 0
