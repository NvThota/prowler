---
- name: Run compliance Docker Container using AWX Credentials
  hosts: localhost
  become: true

  vars:
    services: "elb,s3,ec2"  # Define the services you want to scan, separated by commas
    region: "us-west-2"  # Specify the region for scans
    compliance_value: "cis-1.2"  # Example compliance value (adjust as needed)
    role_session_name: "complianceSession"  # Session name when assuming a role (Choice 2)
    scan_type: "services"  # Options: 'services' or 'compliance'
    api_url: "https://dev.concierto.cloud/api/masterService/uploadFileForClient"  # Backend API URL

  tasks:
    # Other existing tasks here ...

    # Find the CSV file (both for Choice 1 and 2)
    - name: Find the CSV file
      find:
        paths: "/runner/project/output/"
        patterns: "prowler-output-*.csv"
      register: csv_file
      no_log: true

    # Check if CSV file exists before uploading
    - name: Fail if no CSV file was found
      fail:
        msg: "No CSV file found for uploading."
      when: csv_file.matched == 0

    # Debug CSV file location
    - name: Debug CSV file location
      debug:
        msg: "CSV file found: {{ csv_file.files[0].path }}"

    # List files in /runner/project/output/ directory before upload
    - name: List files in /runner/project/output/ directory before upload
      command: ls -l /runner/project/output/
      register: output_dir_files_pre
      ignore_errors: yes

    # Display files in the output directory before upload
    - name: Display files in the output directory before upload
      debug:
        var: output_dir_files_pre.stdout

    # Upload the CSV file to Backend API directly from /runner/project/output/
    - name: Upload CSV file to Backend API
      uri:
        url: "{{ api_url }}"
        method: POST
        headers:
          apiToken: "698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42"
          Content-Type: "multipart/form-data"
        body_format: form-multipart
        body:
          file:
            src: "{{ csv_file.files[0].path }}"  # Directly use the file path
            filename: "{{ csv_file.files[0].path | basename }}"
            remote_src: yes  # Ensure Ansible knows to look for the file on the controller
      register: upload_response
      when: csv_file.matched > 0
      ignore_errors: yes

    # Pause for 2 minutes after upload
    - name: Pause for 2 minutes after upload
      pause:
        minutes: 2
      when: csv_file.matched > 0

    # Debug API response
    - name: Debug API response
      debug:
        var: upload_response

    # Execute curl command to upload the CSV file directly
    - name: Upload CSV file using curl
      shell: |
        curl -X POST "{{ api_url }}" \
        -H "apiToken: 698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42" \
        -F "file=@{{ csv_file.files[0].path }}"
      register: curl_response
      when: csv_file.matched > 0
      ignore_errors: yes

    # Pause for 2 minutes after curl upload
    - name: Pause for 2 minutes after curl upload
      pause:
        minutes: 2
      when: csv_file.matched > 0

    # Debug curl response
    - name: Debug curl response
      debug:
        var: curl_response

    # List files in /runner/project/output/ directory after upload
    - name: List files in /runner/project/output/ directory after upload
      command: ls -l /runner/project/output/
      register: output_dir_files_post
      ignore_errors: yes

    # Display files in the output directory after upload
    - name: Display files in the output directory after upload
      debug:
        var: output_dir_files_post.stdout
