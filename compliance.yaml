---
- name: Run Healthcheck Docker Container using AWX Credentials
  hosts: localhost
  become: True

  vars:
    services: "elb,s3,ec2"  # Define the services you want to scan, separated by commas
    region: "us-west-2"  # Specify the region for scans
    compliance_value: "cis-1.2"  # Example compliance value (adjust as needed)
    role_session_name: "HealthcheckSession"  # Session name when assuming a role (Choice 2)
    scan_type: "services"  # Options: 'services' or 'compliance'
    api_url: "https://dev.concierto.cloud/api/masterService/uploadFileForClient"  # API URL for file upload

  tasks:
    - name: Debug user choice
      debug:
        msg: "User choice is: '{{ choice }}'"

    - name: Validate user choice
      fail:
        msg: "Invalid choice. Please select '1' to run with AWS credentials or '2' to assume role using ARN."
      when: choice not in [1, 2]

    - name: Debug scan type
      debug:
        msg: "Scan type is: '{{ scan_type }}'"

    # Execute various health checks (code unchanged)
    # ...

    # Find the JSON files generated
    - name: Find JSON files in the output directory
      find:
        paths: "/runner/project/output/"
        patterns: "*.json"
      register: json_files

    # Rename files to replace 'prowler' with 'healthcheck' in their names
    - name: Rename files to replace 'prowler' with 'healthcheck'
      command: mv "{{ item.path }}" "{{ item.path | regex_replace('prowler', 'healthcheck') }}"
      loop: "{{ json_files.files }}"
      when: "'prowler' in item.path"

    # List renamed files
    - name: Display renamed files
      debug:
        msg: "Renamed file: {{ item.path | regex_replace('prowler', 'healthcheck') }}"
      loop: "{{ json_files.files }}"
      when: "'prowler' in item.path"

    # Compress the JSON file into ZIP format
    - name: Compress JSON file into ZIP format
      archive:
        path: "{{ json_files.files[0].path | regex_replace('prowler', 'healthcheck') }}"
        dest: "/runner/project/output/{{ json_files.files[0].path | basename | regex_replace('\\.json$', '.zip') }}"
        format: zip
      when: json_files.matched > 0

    # Wait for 2 minutes before uploading
    - name: Wait for 2 minutes before uploading the file
      pause:
        minutes: 0

    # Upload the ZIP file to Backend API using specified headers and form data
    - name: Upload ZIP to Backend API
      uri:
        url: "{{ api_url }}"
        method: POST
        headers:
          userId: "UD_5bd9c0cc2c71a000152c2d32"
          apiToken: "698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42"
          clientId: "CD_5b974fbfb2864d162de79b66"
          realm: "trianz"
        body_format: form-multipart
        body:
          files:
            content: "{{ lookup('file', '/runner/project/output/' + json_files.files[0].path | basename | regex_replace('prowler', 'healthcheck') | regex_replace('\\.json$', '.zip')) }}"
            filename: "{{ json_files.files[0].path | basename | regex_replace('prowler', 'healthcheck') | regex_replace('\\.json$', '.zip') }}"
          userId: "UD_5bd9c0cc2c71a000152c2d32"
          apiToken: "698f44ff2fd553340c1a8e5b30c39611074abb91abfd0fc8e372fac6d4a8eb42"
      register: upload_response
      when: json_files.matched > 0

    # Optional: Debug API response
    - name: Debug API response
      debug:
        var: upload_response
      when: json_files.matched > 0
